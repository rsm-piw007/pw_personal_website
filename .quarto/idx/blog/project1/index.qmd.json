{"title":"Homework 1","markdown":{"yaml":{"title":"Homework 1","author":"Pin Wang","date":"2025-04-23","weight":1,"callout-appearance":"minimal","execute":{"python":"./.venv/bin/python","echo":true,"warning":false,"message":false},"format":{"html":{"code-fold":true,"theme":"cerulean"}}},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nDean Karlan (Yale) and John List (Chicago) conducted a large-scale direct-mail field experiment to study how matching grants affect charitable giving. They sent 50,083 prior donors one of four types of solicitation letters: a control letter (no match), or letters offering a 1:1, 2:1, or 3:1 match on donations. This notebook replicates their main findings using the publicly available Stata data.\n\n## Data\n\n### Load and Inspect\n```{python}\nimport pandas as pd\n# Load data\ndf = pd.read_stata(\"karlan_list_2007.dta\")\n# Quick overview\ndf.shape, df.columns\n```\n\nThe dataset has 50,083 observations and variables on treatment assignment (`ratio`), donation indicator (`gave`), and donation amount (`amount`), along with covariates for balance tests.\n\n## Balance Test\n\nTo check randomization, we compare the number of months since last donation (`mrm2`) between control and treatment groups.\n\n```{python}\nfrom scipy import stats\nimport statsmodels.formula.api as smf\n\n# Split groups: control==1, treatment==0\ngrp_ctrl = df[df['control']==1]\ngrp_trt  = df[df['control']==0]\n\n# T-test\nt_stat, p_val = stats.ttest_ind(grp_trt['mrm2'], grp_ctrl['mrm2'], equal_var=False)\nprint(f\"T-statistic: {t_stat:.3f}, p-value: {p_val:.3f}\")\n# Regression\nmod = smf.ols(\"mrm2 ~ control\", data=df).fit()\nmod.summary().tables[1]\n```\n\nThe t-test and regression both show no significant difference in `mrm2` (p&gt;0.05), confirming balance on this covariate. Similar checks on other demographics yield the same result, validating the random assignment.\n\n## Experimental Results\n\n### 1. Charitable Contribution Made\n\n#### Response Rates Barplot\nWe compare the fraction of donors who gave anything in control vs. treatment.\n```{python}\nimport matplotlib.pyplot as plt\n# Compute proportions\ndist = df.groupby('control')['gave'].mean().rename({1:'Control',0:'Treatment'})\ndist.plot.bar(legend=False)\nplt.ylabel('Proportion Gave')\nplt.title('Donation Rate by Group')\nplt.show()\n```\n\n#### Statistical Tests\n```{python}\nfrom scipy import stats\nimport statsmodels.formula.api as smf\n\n# T-test on binary outcome\nt2, p2 = stats.ttest_ind(grp_ctrl['gave'], grp_trt['gave'], equal_var=False)\nprint(f\"Donation t-test: t={t2:.3f}, p={p2:.3f}\")\n\n# Linear regression\nnmod = smf.ols('gave ~ control', data=df).fit()\n\n# Show coefficient table\nnmod.summary().tables[1]\n\n```\n\nTreatment increases the probability of giving by about 0.004 (0.4 percentage points), p&lt;0.01, indicating matches significantly boost participation.\n\n#### Probit Regression\n```{python}\nimport statsmodels.api as sm\n\nprobit = sm.Probit(df['gave'], sm.add_constant(df['control'])).fit(disp=False)\nprobit.summary()\n```\n\nThe probit coefficient on `control` confirms a positive and significant treatment effect, matching Table 3 column 1 in Karlan & List (2007).\n\n### 2. Differences between Match Rates\n\n#### Pairwise T-Tests\n```{python}\nfor r1, r2 in [(1,2),(2,3)]:\n    g1 = df[df['ratio']==r1]['gave']\n    g2 = df[df['ratio']==r2]['gave']\n    t, p = stats.ttest_ind(g1, g2, equal_var=False)\n    print(f\"Ratio {r1}:1 vs {r2}:1 t={t:.3f}, p={p:.3f}\")\n```\nNo significant differences appear between 1:1 and 2:1 (p&gt;0.1) or 2:1 and 3:1 (p&gt;0.1), supporting the authors’ finding that richer matches do not further increase response.\n\n#### Regression by Category\n```{python}\nmod_ratio = smf.ols('gave ~ C(ratio)', data=df).fit()\nmod_ratio.summary().tables[1]\n```\nAll match categories (1:1, 2:1, 3:1) have similar positive coefficients (~0.004) relative to control, with overlapping confidence intervals.\n\n#### Direct and Fitted Differences\n```{python}\nmeans = df.groupby('ratio')['gave'].mean()\nprint(\"Direct diff 2:1 - 1:1:\", means[2]-means[1])\nprint(\"Direct diff 3:1 - 2:1:\", means[3]-means[2])\n# From regression coefficients\ndiff12 = mod_ratio.params['C(ratio)[T.2]'] - mod_ratio.params['C(ratio)[T.1]']\nprint(\"Fitted diff 2:1 - 1:1:\", diff12)\n```\nBoth direct and fitted differences are near zero. Thus, match rate magnitude beyond 1:1 is ineffective.\n\n### 3. Size of Charitable Contribution\n\n#### Unconditional Amount\n```{python}\ntamt, pamt = stats.ttest_ind(grp_ctrl['amount'], grp_trt['amount'], equal_var=False)\nprint(f\"Amount t-test: t={tamt:.3f}, p={pamt:.3f}\")\nmod_amt = smf.ols('amount ~ control', data=df).fit()\nmod_amt.summary().tables[1]\n```\nTreatment raises average gift by about \\$0.15 (p&lt;0.05).\n\n#### Conditional on Giving\n```{python}\ndonors = df[df['gave']==1]\ncond_mod = smf.ols('amount ~ control', data=donors).fit()\ncond_mod.summary().tables[1]\n```\nAmong donors, treatment letters lead to slightly smaller average gifts (not significant), suggesting the unconditional increase is driven by higher participation rather than larger gifts.\n\n#### Histograms\n```{python}\nfig, axes = plt.subplots(1,2, figsize=(10,4))\nfor ax, grp, title in zip(axes, [grp_ctrl, grp_trt], ['Control Donors','Treatment Donors']):\n    vals = grp[grp['gave']==1]['amount']\n    ax.hist(vals, bins=20)\n    ax.axvline(vals.mean(), color='red')\n    ax.set_title(title)\nplt.tight_layout()\n```\n\nThe histograms show similar distributions and means (red lines) for control and treatment donors.\n\n## Simulation Experiment\n\n### Law of Large Numbers\n\nWe simulate 10,000 paired draws from Bernoulli(p=0.018) and Bernoulli(p=0.022) and plot the running average of differences.\n\n```{python}\nimport numpy as np\np0, p1 = 0.018, 0.022\nn = 10000\nd0 = np.random.binomial(1,p0,n)\nd1 = np.random.binomial(1,p1,n)\ndiffs = d1 - d0\ncum_avg = np.cumsum(diffs) / (np.arange(n)+1)\nplt.plot(cum_avg)\nplt.hlines(p1-p0,0,n,linestyle='--')\nplt.xlabel('Iteration')\nplt.ylabel('Cumulative mean difference')\nplt.title('Law of Large Numbers')\n```\nAs iterations increase, the cumulative average converges to the true difference (0.004).\n\n### Central Limit Theorem\n\nWe generate sampling distributions of the difference in means at various sample sizes.\n\n```{python}\nn_list = [50,200,500,1000]\nfig, axs = plt.subplots(2,2,figsize=(10,8))\nfor ax,n in zip(axs.flatten(), n_list):\n    sims = []\n    for i in range(1000):\n        x0 = np.random.binomial(1,p0,n)\n        x1 = np.random.binomial(1,p1,n)\n        sims.append(x1.mean()-x0.mean())\n    ax.hist(sims, bins=20)\n    ax.set_title(f'n={n}')\nplt.suptitle('CLT: Distribution of Mean Differences')\n```\n\nThe histograms become tighter around the true mean difference (0.004) as sample size grows, illustrating the Central Limit Theorem.\n\n---\n\n**Conclusion**: We successfully replicate Karlan & List (2007). Matching grants boost response rates by about 0.4 percentage points, but richer matches and gift sizes remain unchanged. Simulation confirms these effects and demonstrates fundamental sampling theorems.\n","srcMarkdownNoYaml":"\n\n## Introduction\n\nDean Karlan (Yale) and John List (Chicago) conducted a large-scale direct-mail field experiment to study how matching grants affect charitable giving. They sent 50,083 prior donors one of four types of solicitation letters: a control letter (no match), or letters offering a 1:1, 2:1, or 3:1 match on donations. This notebook replicates their main findings using the publicly available Stata data.\n\n## Data\n\n### Load and Inspect\n```{python}\nimport pandas as pd\n# Load data\ndf = pd.read_stata(\"karlan_list_2007.dta\")\n# Quick overview\ndf.shape, df.columns\n```\n\nThe dataset has 50,083 observations and variables on treatment assignment (`ratio`), donation indicator (`gave`), and donation amount (`amount`), along with covariates for balance tests.\n\n## Balance Test\n\nTo check randomization, we compare the number of months since last donation (`mrm2`) between control and treatment groups.\n\n```{python}\nfrom scipy import stats\nimport statsmodels.formula.api as smf\n\n# Split groups: control==1, treatment==0\ngrp_ctrl = df[df['control']==1]\ngrp_trt  = df[df['control']==0]\n\n# T-test\nt_stat, p_val = stats.ttest_ind(grp_trt['mrm2'], grp_ctrl['mrm2'], equal_var=False)\nprint(f\"T-statistic: {t_stat:.3f}, p-value: {p_val:.3f}\")\n# Regression\nmod = smf.ols(\"mrm2 ~ control\", data=df).fit()\nmod.summary().tables[1]\n```\n\nThe t-test and regression both show no significant difference in `mrm2` (p&gt;0.05), confirming balance on this covariate. Similar checks on other demographics yield the same result, validating the random assignment.\n\n## Experimental Results\n\n### 1. Charitable Contribution Made\n\n#### Response Rates Barplot\nWe compare the fraction of donors who gave anything in control vs. treatment.\n```{python}\nimport matplotlib.pyplot as plt\n# Compute proportions\ndist = df.groupby('control')['gave'].mean().rename({1:'Control',0:'Treatment'})\ndist.plot.bar(legend=False)\nplt.ylabel('Proportion Gave')\nplt.title('Donation Rate by Group')\nplt.show()\n```\n\n#### Statistical Tests\n```{python}\nfrom scipy import stats\nimport statsmodels.formula.api as smf\n\n# T-test on binary outcome\nt2, p2 = stats.ttest_ind(grp_ctrl['gave'], grp_trt['gave'], equal_var=False)\nprint(f\"Donation t-test: t={t2:.3f}, p={p2:.3f}\")\n\n# Linear regression\nnmod = smf.ols('gave ~ control', data=df).fit()\n\n# Show coefficient table\nnmod.summary().tables[1]\n\n```\n\nTreatment increases the probability of giving by about 0.004 (0.4 percentage points), p&lt;0.01, indicating matches significantly boost participation.\n\n#### Probit Regression\n```{python}\nimport statsmodels.api as sm\n\nprobit = sm.Probit(df['gave'], sm.add_constant(df['control'])).fit(disp=False)\nprobit.summary()\n```\n\nThe probit coefficient on `control` confirms a positive and significant treatment effect, matching Table 3 column 1 in Karlan & List (2007).\n\n### 2. Differences between Match Rates\n\n#### Pairwise T-Tests\n```{python}\nfor r1, r2 in [(1,2),(2,3)]:\n    g1 = df[df['ratio']==r1]['gave']\n    g2 = df[df['ratio']==r2]['gave']\n    t, p = stats.ttest_ind(g1, g2, equal_var=False)\n    print(f\"Ratio {r1}:1 vs {r2}:1 t={t:.3f}, p={p:.3f}\")\n```\nNo significant differences appear between 1:1 and 2:1 (p&gt;0.1) or 2:1 and 3:1 (p&gt;0.1), supporting the authors’ finding that richer matches do not further increase response.\n\n#### Regression by Category\n```{python}\nmod_ratio = smf.ols('gave ~ C(ratio)', data=df).fit()\nmod_ratio.summary().tables[1]\n```\nAll match categories (1:1, 2:1, 3:1) have similar positive coefficients (~0.004) relative to control, with overlapping confidence intervals.\n\n#### Direct and Fitted Differences\n```{python}\nmeans = df.groupby('ratio')['gave'].mean()\nprint(\"Direct diff 2:1 - 1:1:\", means[2]-means[1])\nprint(\"Direct diff 3:1 - 2:1:\", means[3]-means[2])\n# From regression coefficients\ndiff12 = mod_ratio.params['C(ratio)[T.2]'] - mod_ratio.params['C(ratio)[T.1]']\nprint(\"Fitted diff 2:1 - 1:1:\", diff12)\n```\nBoth direct and fitted differences are near zero. Thus, match rate magnitude beyond 1:1 is ineffective.\n\n### 3. Size of Charitable Contribution\n\n#### Unconditional Amount\n```{python}\ntamt, pamt = stats.ttest_ind(grp_ctrl['amount'], grp_trt['amount'], equal_var=False)\nprint(f\"Amount t-test: t={tamt:.3f}, p={pamt:.3f}\")\nmod_amt = smf.ols('amount ~ control', data=df).fit()\nmod_amt.summary().tables[1]\n```\nTreatment raises average gift by about \\$0.15 (p&lt;0.05).\n\n#### Conditional on Giving\n```{python}\ndonors = df[df['gave']==1]\ncond_mod = smf.ols('amount ~ control', data=donors).fit()\ncond_mod.summary().tables[1]\n```\nAmong donors, treatment letters lead to slightly smaller average gifts (not significant), suggesting the unconditional increase is driven by higher participation rather than larger gifts.\n\n#### Histograms\n```{python}\nfig, axes = plt.subplots(1,2, figsize=(10,4))\nfor ax, grp, title in zip(axes, [grp_ctrl, grp_trt], ['Control Donors','Treatment Donors']):\n    vals = grp[grp['gave']==1]['amount']\n    ax.hist(vals, bins=20)\n    ax.axvline(vals.mean(), color='red')\n    ax.set_title(title)\nplt.tight_layout()\n```\n\nThe histograms show similar distributions and means (red lines) for control and treatment donors.\n\n## Simulation Experiment\n\n### Law of Large Numbers\n\nWe simulate 10,000 paired draws from Bernoulli(p=0.018) and Bernoulli(p=0.022) and plot the running average of differences.\n\n```{python}\nimport numpy as np\np0, p1 = 0.018, 0.022\nn = 10000\nd0 = np.random.binomial(1,p0,n)\nd1 = np.random.binomial(1,p1,n)\ndiffs = d1 - d0\ncum_avg = np.cumsum(diffs) / (np.arange(n)+1)\nplt.plot(cum_avg)\nplt.hlines(p1-p0,0,n,linestyle='--')\nplt.xlabel('Iteration')\nplt.ylabel('Cumulative mean difference')\nplt.title('Law of Large Numbers')\n```\nAs iterations increase, the cumulative average converges to the true difference (0.004).\n\n### Central Limit Theorem\n\nWe generate sampling distributions of the difference in means at various sample sizes.\n\n```{python}\nn_list = [50,200,500,1000]\nfig, axs = plt.subplots(2,2,figsize=(10,8))\nfor ax,n in zip(axs.flatten(), n_list):\n    sims = []\n    for i in range(1000):\n        x0 = np.random.binomial(1,p0,n)\n        x1 = np.random.binomial(1,p1,n)\n        sims.append(x1.mean()-x0.mean())\n    ax.hist(sims, bins=20)\n    ax.set_title(f'n={n}')\nplt.suptitle('CLT: Distribution of Mean Differences')\n```\n\nThe histograms become tighter around the true mean difference (0.004) as sample size grows, illustrating the Central Limit Theorem.\n\n---\n\n**Conclusion**: We successfully replicate Karlan & List (2007). Matching grants boost response rates by about 0.4 percentage points, but richer matches and gift sizes remain unchanged. Simulation confirms these effects and demonstrates fundamental sampling theorems.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"python":"./.venv/bin/python","message":false,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.43","theme":["cosmo","brand","cerulean"],"title":"Homework 1","author":"Pin Wang","date":"2025-04-23","weight":1,"callout-appearance":"minimal"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}