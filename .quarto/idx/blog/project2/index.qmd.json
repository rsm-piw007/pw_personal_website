{"title":"Homework 2","markdown":{"yaml":{"title":"Homework 2","author":"Pin Wang","date":"2025-04-27","weight":2,"callout-appearance":"minimal","execute":{"python":"./.venv/bin/python","echo":true,"warning":false,"message":false},"format":{"html":{"code-fold":true,"theme":"cerulean"}}},"headingText":"Blueprinty Case Study","containsRefs":false,"markdown":"\n\n### Introduction\n\nBlueprinty is a small firm that makes software for developing blueprints specifically for submitting patent applications to the US patent office. Their marketing team would like to make the claim that patent applicants using Blueprinty's software are more successful in getting their patent applications approved. Ideal data to study such an effect might include the success rate of patent applications before using Blueprinty's software and after using it. Unfortunately, such data is not available.\n\nHowever, Blueprinty has collected data on 1,500 mature (non-startup) engineering firms. The data include each firm's number of patents awarded over the last 5 years (`patents`), regional location (`region`), age since incorporation (`age`), and whether or not the firm uses Blueprinty's software (`iscustomer`). We will use Poisson models to explore whether using Blueprinty’s software is associated with more patents.\n\n### Data\n\n```{python}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.special import gammaln\nfrom scipy import optimize\nimport statsmodels.api as sm\nfrom statsmodels.iolib.summary2 import summary_col\n\n# Read Blueprinty data\ndf_bp = pd.read_csv(\"blueprinty.csv\")\n```\n\n#### Comparing Patents by Customer Status\n\n```{python}\nplt.figure(figsize=(8, 5))\nsns.histplot(data=df_bp, x=\"patents\", hue=\"iscustomer\", element=\"step\", stat=\"count\", bins=15, palette=\"Set2\")\nplt.xlabel(\"Number of Patents (last 5 years)\")\nplt.ylabel(\"Count of Firms\")\nplt.title(\"Distribution of Patent Counts by Blueprinty Customer Status\")\nplt.show()\n\nprint(df_bp.groupby('iscustomer')['patents'].mean())\n```\n\n> **Observation:** Blueprinty customers have a higher average patent count, but age and region differences warrant controls.\n\n#### Comparing Age and Region by Customer Status\n\n```{python}\nsns.boxplot(data=df_bp, x='iscustomer', y='age', palette='Set2')\nplt.title('Firm Age by Customer Status')\nplt.show()\n\nsns.countplot(data=df_bp, x='region', hue='iscustomer', palette='Set2')\nplt.title('Regional Distribution by Customer Status')\nplt.show()\n```\n\n### Simple Poisson Model\n\n```{python}\ndef loglik_poisson(lmbda, y):\n    return np.sum(y * np.log(lmbda) - lmbda - gammaln(y + 1))\n\ny = df_bp['patents'].values\nlams = np.linspace(0.1, y.mean()*2, 200)\nlls = [loglik_poisson(l, y) for l in lams]\nplt.plot(lams, lls)\nplt.axvline(y.mean(), linestyle='--', color='red')\nplt.show()\nprint(f\"MLE (analytical) = {y.mean():.2f}\")\n```\n\n```{python}\nres = optimize.minimize_scalar(lambda L: -loglik_poisson(L, y), bounds=(0.1, y.mean()*3), method='bounded')\nprint(f\"MLE via optimize = {res.x:.2f}, success={res.success}\")\n```\n\n### Poisson Regression\n\n```{python}\ndf_bp['age_z'] = (df_bp['age'] - df_bp['age'].mean()) / df_bp['age'].std()\ndf_bp['age_sq_z'] = ((df_bp['age']**2) - (df_bp['age']**2).mean()) / (df_bp['age']**2).std()\nX_df = pd.get_dummies(df_bp[['age_z','age_sq_z','region','iscustomer']], drop_first=True)\nX_df.insert(0, 'Intercept', 1)\nX_mat = X_df.astype(float).to_numpy()\ny = df_bp['patents'].values.astype(float)\n```\n\n```{python}\nfrom scipy.optimize import minimize\ndef negll(beta, y, X):\n    eta = np.clip(X @ beta, -20, 20)\n    mu = np.exp(eta)\n    return -np.sum(y * eta - mu - gammaln(y + 1))\n\ninitial_params = np.zeros(X_mat.shape[1])\nres_reg = minimize(\n    negll,\n    initial_params,\n    args=(y, X_mat),\n    method='BFGS',\n    options={'disp': True, 'gtol': 1e-8, 'maxiter': 5000}\n)\n\nbeta_hat = res_reg.x\nse_hat = np.sqrt(np.diag(res_reg.hess_inv))\nresult_table = pd.DataFrame({'coef': beta_hat, 'se': se_hat}, index=X_df.columns)\nprint(\"Converged:\", res_reg.success)\nprint(result_table)\n```\n```{python}\n# Built-in statsmodels Poisson\nmodel_bp = sm.GLM(y, X_df.astype(float), family=sm.families.Poisson()).fit()\nprint(model_bp.summary())\n```\n### Analysis of Poisson Regression Results\n\nThe Poisson regression model yields several important insights:\n\n- **Firm Age**: The coefficients on `age_z` and `age_sq_z` suggest a nonlinear relationship: patent counts increase with firm age up to a point, then decline. This inverted-U pattern may reflect a life-cycle effect.\n- **Blueprinty Customers**: The key coefficient for `iscustomer` is approximately **0.21**, and statistically significant. The exponentiated value, `exp(0.21) ≈ 1.23`, indicates that customers of Blueprinty file **23% more patents** than non-customers, holding other factors constant.\n- **Region Variables**: All region dummy coefficients are small and not statistically significant, implying that regional differences are minimal when other factors are controlled for.\n\nThese results align with the observed group means and validate the firm's marketing claim to some extent, though we caution that causality is not guaranteed.\n\n```{python}\n# Marginal effect for iscustomer\n# Ensure column order matches model training data\nX_base = X_df.copy().astype(float)\nX0 = X_base.copy()\nX1 = X_base.copy()\n\n# Set iscustomer dummy column\niscustomer_col = [col for col in X_base.columns if 'iscustomer' in col]\nif iscustomer_col:\n    col = iscustomer_col[0]\n    X0[col] = 0\n    X1[col] = 1\n\n# Ensure column alignment\nX0 = X0[model_bp.params.index]\nX1 = X1[model_bp.params.index]\n\n# Predict\npred0 = model_bp.predict(X0)\npred1 = model_bp.predict(X1)\nprint(\"Avg patent increase for Blueprinty customers:\", (pred1 - pred0).mean())\n```\n\n> **Conclusion:** Controlling for age and region, Blueprinty customers average about 1.23 times more patents over 5 years, suggesting a potential benefit of the software. Manual MLE implementation did not fully converge, but the results closely match the GLM estimates.\n\n\n---\n\n## Airbnb Case Study\n\n### Data & EDA\n\n```{python}\ndf_ab = pd.read_csv(\"airbnb.csv\", parse_dates=['last_scraped','host_since'])\ndf_ab['days_listed'] = (df_ab['last_scraped'] - df_ab['host_since']).dt.days\nvars_keep = ['number_of_reviews','room_type','days_listed','bathrooms','bedrooms','price',\n             'review_scores_cleanliness','review_scores_location','review_scores_value','instant_bookable']\ndf_ab = df_ab.dropna(subset=vars_keep)\nplt.hist(df_ab['number_of_reviews'], bins=30)\nplt.title('Review Count Distribution')\nplt.show()\n```\n\n### Poisson Regression for Reviews\n\n```{python}\ndf_ab['clean'] = df_ab['review_scores_cleanliness']\nX_ab = pd.get_dummies(df_ab[['days_listed','room_type','bathrooms','bedrooms','price','clean',\n                              'review_scores_location','review_scores_value','instant_bookable']], drop_first=True)\nX_ab.insert(0,'Intercept',1)\nX_ab = X_ab.astype(float)\ny_ab = df_ab['number_of_reviews'].values\nmodel_ab = sm.GLM(y_ab, X_ab, family=sm.families.Poisson()).fit()\nprint(summary_col([model_ab], float_format='%.3f', stars=True))\n```\n\n### Analysis of Airbnb Regression Results\n\nThe Poisson regression for Airbnb reviews reveals several clear patterns:\n\n- **Days Listed**: Listings that have been active for more days receive significantly more reviews, consistent with cumulative exposure.\n- **Room Type**: Entire-home listings get more reviews than shared/private rooms, likely due to higher demand and broader appeal.\n- **Instant Bookable**: This convenience feature is positively associated with review count, indicating user preference for low-friction booking experiences.\n- **Cleanliness, Location, and Value Scores**: Higher review sub-scores positively correlate with the number of reviews, suggesting a feedback loop between guest satisfaction and visibility.\n\nOverall, the model identifies actionable levers for hosts seeking to increase guest engagement through reviews.\n","srcMarkdownNoYaml":"\n## Blueprinty Case Study\n\n### Introduction\n\nBlueprinty is a small firm that makes software for developing blueprints specifically for submitting patent applications to the US patent office. Their marketing team would like to make the claim that patent applicants using Blueprinty's software are more successful in getting their patent applications approved. Ideal data to study such an effect might include the success rate of patent applications before using Blueprinty's software and after using it. Unfortunately, such data is not available.\n\nHowever, Blueprinty has collected data on 1,500 mature (non-startup) engineering firms. The data include each firm's number of patents awarded over the last 5 years (`patents`), regional location (`region`), age since incorporation (`age`), and whether or not the firm uses Blueprinty's software (`iscustomer`). We will use Poisson models to explore whether using Blueprinty’s software is associated with more patents.\n\n### Data\n\n```{python}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.special import gammaln\nfrom scipy import optimize\nimport statsmodels.api as sm\nfrom statsmodels.iolib.summary2 import summary_col\n\n# Read Blueprinty data\ndf_bp = pd.read_csv(\"blueprinty.csv\")\n```\n\n#### Comparing Patents by Customer Status\n\n```{python}\nplt.figure(figsize=(8, 5))\nsns.histplot(data=df_bp, x=\"patents\", hue=\"iscustomer\", element=\"step\", stat=\"count\", bins=15, palette=\"Set2\")\nplt.xlabel(\"Number of Patents (last 5 years)\")\nplt.ylabel(\"Count of Firms\")\nplt.title(\"Distribution of Patent Counts by Blueprinty Customer Status\")\nplt.show()\n\nprint(df_bp.groupby('iscustomer')['patents'].mean())\n```\n\n> **Observation:** Blueprinty customers have a higher average patent count, but age and region differences warrant controls.\n\n#### Comparing Age and Region by Customer Status\n\n```{python}\nsns.boxplot(data=df_bp, x='iscustomer', y='age', palette='Set2')\nplt.title('Firm Age by Customer Status')\nplt.show()\n\nsns.countplot(data=df_bp, x='region', hue='iscustomer', palette='Set2')\nplt.title('Regional Distribution by Customer Status')\nplt.show()\n```\n\n### Simple Poisson Model\n\n```{python}\ndef loglik_poisson(lmbda, y):\n    return np.sum(y * np.log(lmbda) - lmbda - gammaln(y + 1))\n\ny = df_bp['patents'].values\nlams = np.linspace(0.1, y.mean()*2, 200)\nlls = [loglik_poisson(l, y) for l in lams]\nplt.plot(lams, lls)\nplt.axvline(y.mean(), linestyle='--', color='red')\nplt.show()\nprint(f\"MLE (analytical) = {y.mean():.2f}\")\n```\n\n```{python}\nres = optimize.minimize_scalar(lambda L: -loglik_poisson(L, y), bounds=(0.1, y.mean()*3), method='bounded')\nprint(f\"MLE via optimize = {res.x:.2f}, success={res.success}\")\n```\n\n### Poisson Regression\n\n```{python}\ndf_bp['age_z'] = (df_bp['age'] - df_bp['age'].mean()) / df_bp['age'].std()\ndf_bp['age_sq_z'] = ((df_bp['age']**2) - (df_bp['age']**2).mean()) / (df_bp['age']**2).std()\nX_df = pd.get_dummies(df_bp[['age_z','age_sq_z','region','iscustomer']], drop_first=True)\nX_df.insert(0, 'Intercept', 1)\nX_mat = X_df.astype(float).to_numpy()\ny = df_bp['patents'].values.astype(float)\n```\n\n```{python}\nfrom scipy.optimize import minimize\ndef negll(beta, y, X):\n    eta = np.clip(X @ beta, -20, 20)\n    mu = np.exp(eta)\n    return -np.sum(y * eta - mu - gammaln(y + 1))\n\ninitial_params = np.zeros(X_mat.shape[1])\nres_reg = minimize(\n    negll,\n    initial_params,\n    args=(y, X_mat),\n    method='BFGS',\n    options={'disp': True, 'gtol': 1e-8, 'maxiter': 5000}\n)\n\nbeta_hat = res_reg.x\nse_hat = np.sqrt(np.diag(res_reg.hess_inv))\nresult_table = pd.DataFrame({'coef': beta_hat, 'se': se_hat}, index=X_df.columns)\nprint(\"Converged:\", res_reg.success)\nprint(result_table)\n```\n```{python}\n# Built-in statsmodels Poisson\nmodel_bp = sm.GLM(y, X_df.astype(float), family=sm.families.Poisson()).fit()\nprint(model_bp.summary())\n```\n### Analysis of Poisson Regression Results\n\nThe Poisson regression model yields several important insights:\n\n- **Firm Age**: The coefficients on `age_z` and `age_sq_z` suggest a nonlinear relationship: patent counts increase with firm age up to a point, then decline. This inverted-U pattern may reflect a life-cycle effect.\n- **Blueprinty Customers**: The key coefficient for `iscustomer` is approximately **0.21**, and statistically significant. The exponentiated value, `exp(0.21) ≈ 1.23`, indicates that customers of Blueprinty file **23% more patents** than non-customers, holding other factors constant.\n- **Region Variables**: All region dummy coefficients are small and not statistically significant, implying that regional differences are minimal when other factors are controlled for.\n\nThese results align with the observed group means and validate the firm's marketing claim to some extent, though we caution that causality is not guaranteed.\n\n```{python}\n# Marginal effect for iscustomer\n# Ensure column order matches model training data\nX_base = X_df.copy().astype(float)\nX0 = X_base.copy()\nX1 = X_base.copy()\n\n# Set iscustomer dummy column\niscustomer_col = [col for col in X_base.columns if 'iscustomer' in col]\nif iscustomer_col:\n    col = iscustomer_col[0]\n    X0[col] = 0\n    X1[col] = 1\n\n# Ensure column alignment\nX0 = X0[model_bp.params.index]\nX1 = X1[model_bp.params.index]\n\n# Predict\npred0 = model_bp.predict(X0)\npred1 = model_bp.predict(X1)\nprint(\"Avg patent increase for Blueprinty customers:\", (pred1 - pred0).mean())\n```\n\n> **Conclusion:** Controlling for age and region, Blueprinty customers average about 1.23 times more patents over 5 years, suggesting a potential benefit of the software. Manual MLE implementation did not fully converge, but the results closely match the GLM estimates.\n\n\n---\n\n## Airbnb Case Study\n\n### Data & EDA\n\n```{python}\ndf_ab = pd.read_csv(\"airbnb.csv\", parse_dates=['last_scraped','host_since'])\ndf_ab['days_listed'] = (df_ab['last_scraped'] - df_ab['host_since']).dt.days\nvars_keep = ['number_of_reviews','room_type','days_listed','bathrooms','bedrooms','price',\n             'review_scores_cleanliness','review_scores_location','review_scores_value','instant_bookable']\ndf_ab = df_ab.dropna(subset=vars_keep)\nplt.hist(df_ab['number_of_reviews'], bins=30)\nplt.title('Review Count Distribution')\nplt.show()\n```\n\n### Poisson Regression for Reviews\n\n```{python}\ndf_ab['clean'] = df_ab['review_scores_cleanliness']\nX_ab = pd.get_dummies(df_ab[['days_listed','room_type','bathrooms','bedrooms','price','clean',\n                              'review_scores_location','review_scores_value','instant_bookable']], drop_first=True)\nX_ab.insert(0,'Intercept',1)\nX_ab = X_ab.astype(float)\ny_ab = df_ab['number_of_reviews'].values\nmodel_ab = sm.GLM(y_ab, X_ab, family=sm.families.Poisson()).fit()\nprint(summary_col([model_ab], float_format='%.3f', stars=True))\n```\n\n### Analysis of Airbnb Regression Results\n\nThe Poisson regression for Airbnb reviews reveals several clear patterns:\n\n- **Days Listed**: Listings that have been active for more days receive significantly more reviews, consistent with cumulative exposure.\n- **Room Type**: Entire-home listings get more reviews than shared/private rooms, likely due to higher demand and broader appeal.\n- **Instant Bookable**: This convenience feature is positively associated with review count, indicating user preference for low-friction booking experiences.\n- **Cleanliness, Location, and Value Scores**: Higher review sub-scores positively correlate with the number of reviews, suggesting a feedback loop between guest satisfaction and visibility.\n\nOverall, the model identifies actionable levers for hosts seeking to increase guest engagement through reviews.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"python":"./.venv/bin/python","message":false,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.43","theme":["cosmo","brand","cerulean"],"title":"Homework 2","author":"Pin Wang","date":"2025-04-27","weight":2,"callout-appearance":"minimal"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}